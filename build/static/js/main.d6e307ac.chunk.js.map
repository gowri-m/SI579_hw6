{"version":3,"sources":["RhymeWord.js","RhymeWordsList.js","index.js"],"names":["RhymeWord","props","sylVal","description","onClick","onClickSaveWords","keyVal","RhymeWordsList","inputEl","useRef","useState","outDescEl","setOutDescEl","state","setState","dataResponse","setDataResponse","savedOutput","setSavedOutput","savedWords","a","input_word","current","value","fetch","res","json","data","length","wordGroups","groupBy","elements","Object","values","forEach","eachGroup","sub_elements","map","item","i","numSyllables","word","saveWords","push","newWord","split","join","console","log","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","result","Array","from","keys","sort","key","className","ref","type","placeholder","showRhymingWords","showSynonyms","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6e307ac.chunk.js","sourcesContent":["function RhymeWord(props) {\n    return(<div>{props.sylVal ? <h2>{props.sylVal}</h2> : \"\"}\n            <li key={props.keyVal}>{props.description} <button onClick={props.onClickSaveWords}>(save)</button></li>\n            </div>) \n}\n\nexport default RhymeWord;","import {useRef,useState} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport RhymeWord from './RhymeWord';\n\n\nfunction RhymeWordsList () {\n\n    const inputEl = useRef(null);\n    \n    const [outDescEl, setOutDescEl] = useState('');\n    const [state, setState] = useState(false);\n    const [dataResponse, setDataResponse] = useState(null);\n    const [savedOutput, setSavedOutput] = useState(null);\n    let savedWords = [];\n       \n    async function showRhymingWords() {        \n        const input_word = inputEl.current.value;\n        const res = await fetch(\"https://api.datamuse.com/words?rel_rhy=\" + input_word);\n        const data = await res.json();\n\n        setOutDescEl('Words that rhyme with ' + input_word + \":\");\n        setDataResponse('Loading...');\n        setState(true);\n        \n        if(data.length === 0){\n            setDataResponse('(no result)');\n        }else{\n            const wordGroups = groupBy(data, 'numSyllables');\n            let elements = []\n            Object.values(wordGroups).forEach(eachGroup => {      \n                const sub_elements = eachGroup.map((item, i) => <RhymeWord sylVal={i ? '' : item.numSyllables+' Syllable'} keyVal={i} description={item.word} onClickSaveWords={()=>saveWords(item.word)}/>)\n                elements.push(sub_elements);\n            });\n            setDataResponse(elements);\n        }  \n        //console.log(data);\n    }\n\n    async function showSynonyms() {\n        const input_word = inputEl.current.value;\n        const res = await fetch(\"https://api.datamuse.com/words?ml=\" + input_word);\n        const data = await res.json();\n        \n        setOutDescEl('Words with a meaning similar to ' + input_word + ':');\n        setDataResponse('Loading...');\n        setState(true);\n\n        if(data.length === 0){\n            setDataResponse('(no result)');\n        }else{\n            const elements = data.map((item, i) => <RhymeWord description={item.word} onClickSaveWords={()=>saveWords(item.word)}/>)\n            setDataResponse(elements);\n        }\n        //console.log(data);\n      }\n\n    function saveWords(newWord) {\n        if(savedWords.length !== 0){\n            savedWords.push(newWord);\n        }else if(savedOutput){\n            savedWords = savedOutput.split(',');\n            savedWords.push(newWord);\n        }else{\n            savedWords.push(newWord);\n        }\n        \n        setSavedOutput(savedWords.join(','));\n        console.log(savedWords);\n    }\n\n\n    /**\n     * Returns a list of objects grouped by some property. For example:\n     * groupBy([{name: 'Steve', team:'blue'}, {name: 'Jack', team: 'red'}, {name: 'Carol', team: 'blue'}], 'team')\n     * \n     * returns:\n     * { 'blue': [{name: 'Steve', team: 'blue'}, {name: 'Carol', team: 'blue'}],\n     *    'red': [{name: 'Jack', team: 'red'}]\n     * }\n     * \n     * @param {any[]} objects: An array of objects\n     * @param {string|Function} property: A property to group objects by\n     * @returns  An object where the keys representing group names and the values are the items in objects that are in that group\n     */\n     function groupBy(objects, property) {\n        // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n        // value for property (obj[property])\n        if(typeof property !== 'function') {\n            const propName = property;\n            property = (obj) => obj[propName];\n        }\n\n        const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n        for(const object of objects) {\n            const groupName = property(object);\n            //Make sure that the group exists\n            if(!groupedObjects.has(groupName)) {\n                groupedObjects.set(groupName, []);\n            }\n            groupedObjects.get(groupName).push(object);\n        }\n\n        // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n        const result = {};\n        for(const key of Array.from(groupedObjects.keys()).sort()) {\n            result[key] = groupedObjects.get(key);\n        }\n        return result;\n    }\n\n    return (<div className=\"container\"> \n        <h1 className=\"row\">Rhyme Finder (579 Problem Set 6)</h1>\n        <div className=\"row\">\n            <div className=\"col\">Saved words: <span>{savedOutput ? savedOutput : ''}</span></div>\n        </div>\n        <div className=\"row\">\n            <div className=\"input-group col\">\n                <input ref={inputEl} className=\"form-control\" type=\"text\" placeholder=\"Enter a word\"/>\n                <button type=\"button\" onClick={() => showRhymingWords()} className=\"btn btn-primary\">Show rhyming words</button>\n                <button type=\"button\" onClick={() => showSynonyms()} className=\"btn btn-secondary\">Show synonyms</button>\n            </div>\n        </div>\n        <div className=\"row\">\n            <h2 className=\"col\">\n                <output>{outDescEl}</output>\n            </h2>\n        </div>\n        <div className=\"output row\">\n            <output className=\"col\">\n                { state ? dataResponse : ''}\n            </output>\n        </div>\n    </div>)\n    \n}\n\nexport default RhymeWordsList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RhymeWordsList from './RhymeWordsList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RhymeWordsList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}